OBJS = parser.cmo scanner.cmo printer.cmo trans.cmo interp.cmo

all: culog print pwall simulator

culog : $(OBJS) culog.cmo
	ocamlc -g -o culog $(OBJS) culog.cmo

simulator : $(OBJS) simulator.cmo
	ocamlc -g -o simulator $(OBJS) simulator.cmo

pwall : $(OBJS) pwall.cmo
	ocamlc -g -o pwall $(OBJS) pwall.cmo

print : $(OBJS) print.cmo
	ocamlc -g -o $@ $(OBJS) print.cmo

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc parser.mly

%.cmo : %.ml
	ocamlc -c -g $<

%.cmi : %.mli
	ocamlc -c -g $<

srclc:
	sloccount printer.ml parser.mly scanner.mll interp.ml tst.mli \
	print.ml trans.ml Makefile *.py simulator.ml culog.ml pwall.ml

tstlc:
	wc -l tests/*.ul
	wc -l tests/*.out

test: all
	python test.py

.PHONY : clean
clean :
	rm -f culog parser.ml parser.mli scanner.ml testall.log *.cmo *.cmi \
	print simulator pwall

# Generated by ocamldep *.ml *.mli
culog.cmo: scanner.cmo parser.cmi interp.cmo
culog.cmx: scanner.cmx parser.cmx interp.cmx
interp.cmo: tst.cmi trans.cmo ast.cmi
interp.cmx: tst.cmi trans.cmx ast.cmi
parser.cmo: ast.cmi parser.cmi
parser.cmx: ast.cmi parser.cmi
printer.cmo: ast.cmi
printer.cmx: ast.cmi
print.cmo: scanner.cmo printer.cmo parser.cmi
print.cmx: scanner.cmx printer.cmx parser.cmx
pwall.cmo: scanner.cmo parser.cmi interp.cmo ast.cmi
pwall.cmx: scanner.cmx parser.cmx interp.cmx ast.cmi
scanner.cmo: parser.cmi
scanner.cmx: parser.cmx
simulator.cmo: scanner.cmo parser.cmi interp.cmo ast.cmi
simulator.cmx: scanner.cmx parser.cmx interp.cmx ast.cmi
tprinter.cmo: ast.cmi
tprinter.cmx: ast.cmi
trans.cmo: tst.cmi ast.cmi
trans.cmx: tst.cmi ast.cmi
parser.cmi: ast.cmi
tst.cmi: ast.cmi
