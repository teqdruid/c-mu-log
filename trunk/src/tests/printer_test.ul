/*This is a test case   */

/*
  environ1.ul
  The environment being operated in is the list of the
  simulator's facts, then the facts and rules below
*/

/*This is a sample 15x15 environment*/
size(15,15);

@attach("geometry.ul");
/*A wall segment at (5,5)*/
wall(5,5);
/*A wall segment from (1,10) to (5,10)*/
wall($X,$Y) { 
	$X > 0; 
	$X <= 5;
	$Y == 10;
}
/*A wall that only appears when an agent is at (1,2) or (1,4)*/
wall(1,3) {OR:
	object(1, 2, agent1);
	object(1, 4, agent1);
}

/* A wall that only appears when an agent is at (2,2) or (2,4),
  but stays there after the agent leaves*/
wall(2,3) {
	{OR:
		object(2, 2, agent1);
		object(2, 4, agent1);
	}
	@learn( wall(2,3); );
}
/* An invisible switch appears at (3,3) and dissolves the wall
   at (2,3) when the agent steps on it */
object(3, 3, switchObject) {
	object(3, 3, agent1);
	@forget( wall(2,3); );
}
/*The objective is at (15,15)*/
object($x, $y, wallObject) {
	wall($x, $y);
}

/* These are the icons for each object*/
repr(wallObject, "pix/wall.png");
repr(switchObject, "pix/switch.png");
repr(goalObject, "pix/goal.png");

/* Agent success if it reaches (15, 15)*/
finish(SuccessAgent1) {
	object(15, 15, agent1);
}

finish(SuccessAgent2) {
	object(13, 15, agent2);
}

/* Fail the simulation if the agent hits a wall*/
finish(Failure) {
	object($x, $y, agent1);
	wall($x, $y);
}
/* Load agent1*/
repr(agent1, "agent1.sl");

/*Place at (1,1) then forget about the agent,
 so the simulator will take over agent management*/
object(1, 1, agent1) {
	@forget( object(1, 1, agent1); );
}

viewRange($x, $y, $viewer, $obj, $rangeMax) {
	object($ViewerX, $ViewerY, $viewer);
	range($x, $y, $ViewerX, $ViewerY, $range);
	0 <= $range ;
	$range <= $rangeMax;
	object($x, $y, $obj);
}
viewAccessRule(agent1);
/*How far can agents see?
 This is defined in geometry.ul*/
view($x, $y, $viewer, $obj) {
	viewRange($x, $y, $viewer, $obj, 1);
}

repr(agent2, "agent2.ul");

peers(agent1);
peers(agent2);

