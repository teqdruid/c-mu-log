2.tutorial:


Logic programming is a kind of computer programming using mathematical logic. Specifically, it is based on the the idea that of applying a theorem-prover to declarative sentences and deriving implications. Compared with procedural languages, logic programming solves the problem by setting rules with which solutions must fit. We can represent logic programming by the formula:
                                           Facts + Rules = Solutions

Logic programming languages provide several important advantages:
    • Logic programming languages are inherently “high level” languages, allowing programmers to specify problems in a declarative manner, leaving some of  all of the details of solving the problem to the interpreter. 
    • The structures–both programming structures and data structures–in both prolog and CµLOG can be very simple- such as facts. The relationship between code and data is also of note. CµLOG uses the Von Neumann style (vs. Harvard architecture) wherein data is code. It is therefore possible (and inherently necessary) for programs to be introspective, and self-modifying. In other words, it is easier for programs to learn and adapt.

C-mu-log:

1.1 Variables:
Variables represent a value to be solved for. They don't have a fixed datatype, but match to the refered type. All variables are scoped to the rule, so that variable solutions can be shared between subblocks.

Variables are represented by a dollar sign ($) then the variable name. The name must start with a letter, and is composed of letters, numbers, and underscores. There is a special variable called the anonymous variable which is represented simply by a question mark (?).

eg: $foo  $bar_  $f1o2o3

But the following are not allowed:

foo  $_foo  $1bar


1.2 Statements:

These are conditional statements which give output as true or false only. They are of two types, comparison and evaluation statements.

Comparison statements are used to comapare specific types only. They are used constrain variables.

eg: $a>1+3-4; //means that variable 'a' is always greater than '0'
    $boo<= 5; // means that variable 'boo' is less than or equal to 5

Evaluation or eval statements are used to query the program for solutions.

eg: boofar($s,$d,7); //from all the possible matches in the tree it returns various possible values for the pair s and d. 


1.3 Facts:
Facts are terminal nodes of the soluion search which are always true. Facts help us define constant information in the program like the position of a wall.

Syntax: id(parameter1, parameter2 ....);

eg1:wall(2,3); 
This means that a wall is permanently defined for 2 and 3;

eg2:fire(4,a);
Symbols like 'a' can also be a parameter. Here fire of 4 and 'a' evaluates to be true.


1.4 Rules:
Rules are similar to facts, but are only conditionally true. These conditions are defined inside a block. The defination or declaration of rules suggests that the solution tree is about to branch out to search for new solutions.

syntax: id(parameter1, parameter2....) {conditions}

The block is "{conditions}" in the above syntax. Block can be of 2 types, namely 'AND' and 'OR' block. And block evalutes true iff all the conitions inside the block are true. Similarly, the OR block is true if any one of the conditions is true. If no reduction method, i.e. AND or OR is written, by default AND is considered.

To define a OR block we use the following construct:

{OR:
    foo();
    bar();
}
The AND block is written similarly.
eg: 
wall(2,3) {
		foo();
		bar();
		 {OR: barfoo(); foobar();}
	  }
Here {OR: barfoo(); foobar();} is a sub-block. Here wall(2,3) is true if foo() and bar() are true and if either of barfoo() or foobar() are true.

1.5 Directives:
Three interpreter directives are supported; print, learn and forget. print is used to output strings and results during runtime. the learn and forget directives are used for database modification. They function similar to asset and retract of prolog.


syntax: @directive_name(parameters);

eg:

@print("hello world"); //prints "hello world"
@learn(fire(4,5););    //adds a fact to the database that 'fire' is true for 4,5
@forget(tree(3,9););   //erases the fact from the database that tree is true for 3,9.


Now for the user to be able to run a simulation or play a game in c-mu-log, they will have to use a simulator which interacts with the logic engine of the langauge to produce required results. For demonstration we have done so already. This simulator defines a class of games or simulations described as follows:

The environment is grid based and defined by a CµLOG program. It potentially includes obstacles and a goals which the agent must reach, however the game is defined almost entirely by the environment program. Every object (i.e. agents, walls, switches, goals) in the environment is defined by grid positions. The environment specifies the representations of the entities to the simulator. The simulator re-evaluates the object rule during each turn when it renders the grid, so the contents of the grid can be dynamically defined based on the state of the simulation or the contents of the program (which can be changed by the program.) For example based on the grid position of the agent the environment might remove or insert a wall. The agent program decides the next move based on previous moves and obstacle data.

The simulation of the agent program is also turn based. Each time the agent makes a move it sends its new coordinates to the simulator. The new coordinates become part of the simulation’s rules which are exposed to the environment when it is solved to render the scene.


example1:

Size(5,5);		//defines the grid size of 5 by 5
wall(2,3);		//a fact where wall is present at coordinates 2,3 	
wall(4,2);
goal(3,3);		//a fact which defines the goal to be achieved by the player	

igo("UP");		//move($dir) would be true for all the values of $dir for which igo($dir) is true
move($dir){
   @forget(igo($dir);); //causes the interpreter to remove igo("UP") from its database.
   igo($dir);		//it is required because the eval statement "igo($dir)" will keep returning "UP" for $dir.	
}

The output of the above program is:
X

. . . . .
. . . . .
. | # . .
x . . | .
. . . . .


In the above example, 'size', 'goal', 'wall' and 'move' are keywords for the simulator.Size(5,5) defines the grid in which walls(shown by the "|" sign) are placed at coordinates (2,3),(4,2). A goal object(shown by #)  is placed at (3,3).The game simulation ends when the agent either hits the walls,moves out of the grid or reaches the goal. 

How to use the simulator?
TO run the above code on the simulator, perform the following steps:

1. Write the code in a file with an extension '*.ul'. eg: sample.ul
2. ***** johns help


Now to applying the above learnt concepts for the simulator to a generate more complex program.

example2:

size(5, 5);
wall(2, 3);
wall(4,2);
goal(3, 3);
imove("UP");
imove("RIGHT");
imove("RIGHT");
imove("UP");

move($dir) {
   @forget1( imove($dir); );
   imove($dir);        
}

OUTPUT:

==== Turn 1 ====
. . . . .
. . . . .
. | # . .
x . . | .
. . . . .

x: Moving RIGHT

==== Turn 2 ====
. . . . .
. . . . .
. | # . .
. x . | .
. . . . .

x: Moving RIGHT

==== Turn 3 ====
. . . . .
. . . . .
. | # . .
. . x | .
. . . . .

x: Moving UP

Simulation over: x wins!!!Successfully reach the goal at position (3,3)

Now, in the above code we see a crefully drafted route through the grid can make you win the game. Each step of the simulation is displayed. The 'imove' facts are used as the leaf of the search tree. It gets matched and produces a solution for every statement. Here we use 'forget' directive to remove the previous 'imove' from the database of solutions.

